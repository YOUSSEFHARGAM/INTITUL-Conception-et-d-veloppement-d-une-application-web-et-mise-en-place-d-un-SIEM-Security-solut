//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
public partial class Administrateur
{
    #region Primitive Properties

    public virtual string ID_Admin
    {
        get;
        set;
    }

    public virtual string Login_Admin
    {
        get;
        set;
    }

    public virtual string Password_Admin
    {
        get;
        set;
    }

    public virtual string E_Mail_Admin
    {
        get;
        set;
    }

    public virtual string Telephone_Admin
    {
        get;
        set;
    }

    public virtual string Nom_Admin
    {
        get;
        set;
    }

    public virtual string Prenom_Admin
    {
        get;
        set;
    }

    public virtual string Statut_Admin
    {
        get;
        set;
    }

    public virtual string Cin_Admin
    {
        get;
        set;
    }

    public virtual string Ville_Admin
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual ICollection<Contact> Contacts
    {
        get
        {
            if (_contacts == null)
            {
                var newCollection = new FixupCollection<Contact>();
                newCollection.CollectionChanged += FixupContacts;
                _contacts = newCollection;
            }
            return _contacts;
        }
        set
        {
            if (!ReferenceEquals(_contacts, value))
            {
                var previousValue = _contacts as FixupCollection<Contact>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupContacts;
                }
                _contacts = value;
                var newValue = value as FixupCollection<Contact>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupContacts;
                }
            }
        }
    }
    private ICollection<Contact> _contacts;

    public virtual ICollection<Utilisateur> Utilisateurs
    {
        get
        {
            if (_utilisateurs == null)
            {
                var newCollection = new FixupCollection<Utilisateur>();
                newCollection.CollectionChanged += FixupUtilisateurs;
                _utilisateurs = newCollection;
            }
            return _utilisateurs;
        }
        set
        {
            if (!ReferenceEquals(_utilisateurs, value))
            {
                var previousValue = _utilisateurs as FixupCollection<Utilisateur>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupUtilisateurs;
                }
                _utilisateurs = value;
                var newValue = value as FixupCollection<Utilisateur>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupUtilisateurs;
                }
            }
        }
    }
    private ICollection<Utilisateur> _utilisateurs;

    #endregion
    #region Association Fixup

    private void FixupContacts(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Contact item in e.NewItems)
            {
                item.Administrateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Contact item in e.OldItems)
            {
                if (ReferenceEquals(item.Administrateur, this))
                {
                    item.Administrateur = null;
                }
            }
        }
    }

    private void FixupUtilisateurs(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Utilisateur item in e.NewItems)
            {
                item.Administrateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Utilisateur item in e.OldItems)
            {
                if (ReferenceEquals(item.Administrateur, this))
                {
                    item.Administrateur = null;
                }
            }
        }
    }

    #endregion
}
public partial class Agence
{
    #region Primitive Properties

    public virtual string ID_Utilisateur
    {
        get { return _iD_Utilisateur; }
        set
        {
            if (_iD_Utilisateur != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Utilisateur != value)
                {
                    Utilisateur = null;
                }
                _iD_Utilisateur = value;
            }
        }
    }
    private string _iD_Utilisateur;

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            if (_iD_Admin != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Admin != value)
                {
                    Utilisateur = null;
                }
                _iD_Admin = value;
            }
        }
    }
    private string _iD_Admin;

    public virtual string ID_Agence
    {
        get;
        set;
    }

    public virtual string Ville_Agence
    {
        get;
        set;
    }

    public virtual string Telephone_Agence
    {
        get;
        set;
    }

    public virtual string E_mail_Agence
    {
        get;
        set;
    }

    public virtual string Chf_Agence
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Utilisateur Utilisateur
    {
        get { return _utilisateur; }
        set
        {
            if (!ReferenceEquals(_utilisateur, value))
            {
                var previousValue = _utilisateur;
                _utilisateur = value;
                FixupUtilisateur(previousValue);
            }
        }
    }
    private Utilisateur _utilisateur;

    #endregion
    #region Association Fixup

    private void FixupUtilisateur(Utilisateur previousValue)
    {
        if (previousValue != null && previousValue.Agences.Contains(this))
        {
            previousValue.Agences.Remove(this);
        }

        if (Utilisateur != null)
        {
            if (!Utilisateur.Agences.Contains(this))
            {
                Utilisateur.Agences.Add(this);
            }
            if (ID_Utilisateur != Utilisateur.ID_Utilisateur)
            {
                ID_Utilisateur = Utilisateur.ID_Utilisateur;
            }
            if (ID_Admin != Utilisateur.ID_Admin)
            {
                ID_Admin = Utilisateur.ID_Admin;
            }
        }
    }

    #endregion
}
public partial class Agent_de_credits
{
    #region Primitive Properties

    public virtual string ID_Utilisateur
    {
        get { return _iD_Utilisateur; }
        set
        {
            if (_iD_Utilisateur != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Utilisateur != value)
                {
                    Utilisateur = null;
                }
                _iD_Utilisateur = value;
            }
        }
    }
    private string _iD_Utilisateur;

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            if (_iD_Admin != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Admin != value)
                {
                    Utilisateur = null;
                }
                _iD_Admin = value;
            }
        }
    }
    private string _iD_Admin;

    public virtual string ID_GP
    {
        get;
        set;
    }

    public virtual string Nom_GP
    {
        get;
        set;
    }

    public virtual string Prenom_GP
    {
        get;
        set;
    }

    public virtual string Telephone_GP
    {
        get;
        set;
    }

    public virtual string CIN_GP
    {
        get;
        set;
    }

    public virtual string Ville_GP
    {
        get;
        set;
    }

    public virtual string Chf_GP
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Utilisateur Utilisateur
    {
        get { return _utilisateur; }
        set
        {
            if (!ReferenceEquals(_utilisateur, value))
            {
                var previousValue = _utilisateur;
                _utilisateur = value;
                FixupUtilisateur(previousValue);
            }
        }
    }
    private Utilisateur _utilisateur;

    #endregion
    #region Association Fixup

    private void FixupUtilisateur(Utilisateur previousValue)
    {
        if (previousValue != null && previousValue.Agent_de_credits.Contains(this))
        {
            previousValue.Agent_de_credits.Remove(this);
        }

        if (Utilisateur != null)
        {
            if (!Utilisateur.Agent_de_credits.Contains(this))
            {
                Utilisateur.Agent_de_credits.Add(this);
            }
            if (ID_Utilisateur != Utilisateur.ID_Utilisateur)
            {
                ID_Utilisateur = Utilisateur.ID_Utilisateur;
            }
            if (ID_Admin != Utilisateur.ID_Admin)
            {
                ID_Admin = Utilisateur.ID_Admin;
            }
        }
    }

    #endregion
}
public partial class Client
{
    #region Primitive Properties

    public virtual string ID_Clt
    {
        get;
        set;
    }

    public virtual string ID_Utilisateur
    {
        get { return _iD_Utilisateur; }
        set
        {
            try
            {
                _settingFK = true;
                if (_iD_Utilisateur != value)
                {
                    if (Utilisateur != null && Utilisateur.ID_Utilisateur != value)
                    {
                        var previousValue = _utilisateur;
                        _utilisateur = null;
                        FixupUtilisateur(previousValue, skipKeys: true);
                    }
                    _iD_Utilisateur = value;
                }
            }
            finally
            {
                _settingFK = false;
            }
        }
    }
    private string _iD_Utilisateur;

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            try
            {
                _settingFK = true;
                if (_iD_Admin != value)
                {
                    if (Utilisateur != null && Utilisateur.ID_Admin != value)
                    {
                        var previousValue = _utilisateur;
                        _utilisateur = null;
                        FixupUtilisateur(previousValue, skipKeys: true);
                    }
                    _iD_Admin = value;
                }
            }
            finally
            {
                _settingFK = false;
            }
        }
    }
    private string _iD_Admin;

    public virtual string Nom_Clt
    {
        get;
        set;
    }

    public virtual string Prenom_CLT
    {
        get;
        set;
    }

    public virtual Nullable<int> Age_Clt
    {
        get;
        set;
    }

    public virtual string Cin_Clt
    {
        get;
        set;
    }

    public virtual string Zone_Clt
    {
        get;
        set;
    }

    public virtual string Region_Clt
    {
        get;
        set;
    }

    public virtual Nullable<decimal> Montant_credits_Clt
    {
        get;
        set;
    }

    public virtual string Activite_Clt
    {
        get;
        set;
    }

    public virtual string Produits_Clt
    {
        get;
        set;
    }

    public virtual string Telephone_Clt
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Utilisateur Utilisateur
    {
        get { return _utilisateur; }
        set
        {
            if (!ReferenceEquals(_utilisateur, value))
            {
                var previousValue = _utilisateur;
                _utilisateur = value;
                FixupUtilisateur(previousValue);
            }
        }
    }
    private Utilisateur _utilisateur;

    #endregion
    #region Association Fixup

    private bool _settingFK = false;

    private void FixupUtilisateur(Utilisateur previousValue, bool skipKeys = false)
    {
        if (previousValue != null && previousValue.Clients.Contains(this))
        {
            previousValue.Clients.Remove(this);
        }

        if (Utilisateur != null)
        {
            if (!Utilisateur.Clients.Contains(this))
            {
                Utilisateur.Clients.Add(this);
            }
            if (ID_Utilisateur != Utilisateur.ID_Utilisateur)
            {
                ID_Utilisateur = Utilisateur.ID_Utilisateur;
            }
            if (ID_Admin != Utilisateur.ID_Admin)
            {
                ID_Admin = Utilisateur.ID_Admin;
            }
        }
        else if (!_settingFK && !skipKeys)
        {
            ID_Utilisateur = null;
            ID_Admin = null;
        }
    }

    #endregion
}
public partial class Contact
{
    #region Primitive Properties

    public virtual string ID_Contact
    {
        get;
        set;
    }

    public virtual string ID_Utilisateur
    {
        get { return _iD_Utilisateur; }
        set
        {
            if (_iD_Utilisateur != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Utilisateur != value)
                {
                    Utilisateur = null;
                }
                _iD_Utilisateur = value;
            }
        }
    }
    private string _iD_Utilisateur;

    public virtual string Uti_ID_Admin
    {
        get { return _uti_ID_Admin; }
        set
        {
            if (_uti_ID_Admin != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Admin != value)
                {
                    Utilisateur = null;
                }
                _uti_ID_Admin = value;
            }
        }
    }
    private string _uti_ID_Admin;

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            if (_iD_Admin != value)
            {
                if (Administrateur != null && Administrateur.ID_Admin != value)
                {
                    Administrateur = null;
                }
                _iD_Admin = value;
            }
        }
    }
    private string _iD_Admin;

    public virtual string Subject_Contact
    {
        get;
        set;
    }

    public virtual string Destinaire_Contact
    {
        get;
        set;
    }

    public virtual string Attribut_Contact
    {
        get;
        set;
    }

    public virtual string Message_Contact
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Administrateur Administrateur
    {
        get { return _administrateur; }
        set
        {
            if (!ReferenceEquals(_administrateur, value))
            {
                var previousValue = _administrateur;
                _administrateur = value;
                FixupAdministrateur(previousValue);
            }
        }
    }
    private Administrateur _administrateur;

    public virtual Utilisateur Utilisateur
    {
        get { return _utilisateur; }
        set
        {
            if (!ReferenceEquals(_utilisateur, value))
            {
                var previousValue = _utilisateur;
                _utilisateur = value;
                FixupUtilisateur(previousValue);
            }
        }
    }
    private Utilisateur _utilisateur;

    #endregion
    #region Association Fixup

    private void FixupAdministrateur(Administrateur previousValue)
    {
        if (previousValue != null && previousValue.Contacts.Contains(this))
        {
            previousValue.Contacts.Remove(this);
        }

        if (Administrateur != null)
        {
            if (!Administrateur.Contacts.Contains(this))
            {
                Administrateur.Contacts.Add(this);
            }
            if (ID_Admin != Administrateur.ID_Admin)
            {
                ID_Admin = Administrateur.ID_Admin;
            }
        }
    }

    private void FixupUtilisateur(Utilisateur previousValue)
    {
        if (previousValue != null && previousValue.Contacts.Contains(this))
        {
            previousValue.Contacts.Remove(this);
        }

        if (Utilisateur != null)
        {
            if (!Utilisateur.Contacts.Contains(this))
            {
                Utilisateur.Contacts.Add(this);
            }
            if (ID_Utilisateur != Utilisateur.ID_Utilisateur)
            {
                ID_Utilisateur = Utilisateur.ID_Utilisateur;
            }
            if (Uti_ID_Admin != Utilisateur.ID_Admin)
            {
                Uti_ID_Admin = Utilisateur.ID_Admin;
            }
        }
    }

    #endregion
}
public partial class Productivite
{
    #region Primitive Properties

    public virtual string ID_Utilisateur
    {
        get { return _iD_Utilisateur; }
        set
        {
            if (_iD_Utilisateur != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Utilisateur != value)
                {
                    Utilisateur = null;
                }
                _iD_Utilisateur = value;
            }
        }
    }
    private string _iD_Utilisateur;

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            if (_iD_Admin != value)
            {
                if (Utilisateur != null && Utilisateur.ID_Admin != value)
                {
                    Utilisateur = null;
                }
                _iD_Admin = value;
            }
        }
    }
    private string _iD_Admin;

    public virtual string ID_Prod
    {
        get;
        set;
    }

    public virtual Nullable<int> Jour_Prod
    {
        get;
        set;
    }

    public virtual Nullable<int> Mois_Prod
    {
        get;
        set;
    }

    public virtual Nullable<int> Annee_Prod
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Utilisateur Utilisateur
    {
        get { return _utilisateur; }
        set
        {
            if (!ReferenceEquals(_utilisateur, value))
            {
                var previousValue = _utilisateur;
                _utilisateur = value;
                FixupUtilisateur(previousValue);
            }
        }
    }
    private Utilisateur _utilisateur;

    #endregion
    #region Association Fixup

    private void FixupUtilisateur(Utilisateur previousValue)
    {
        if (previousValue != null && previousValue.Productivites.Contains(this))
        {
            previousValue.Productivites.Remove(this);
        }

        if (Utilisateur != null)
        {
            if (!Utilisateur.Productivites.Contains(this))
            {
                Utilisateur.Productivites.Add(this);
            }
            if (ID_Utilisateur != Utilisateur.ID_Utilisateur)
            {
                ID_Utilisateur = Utilisateur.ID_Utilisateur;
            }
            if (ID_Admin != Utilisateur.ID_Admin)
            {
                ID_Admin = Utilisateur.ID_Admin;
            }
        }
    }

    #endregion
}
public partial class sysdiagram
{
    #region Primitive Properties

    public virtual string name
    {
        get;
        set;
    }

    public virtual int principal_id
    {
        get;
        set;
    }

    public virtual int diagram_id
    {
        get;
        set;
    }

    public virtual Nullable<int> version
    {
        get;
        set;
    }

    public virtual byte[] definition
    {
        get;
        set;
    }

    #endregion
}
public partial class Utilisateur
{
    #region Primitive Properties

    public virtual string ID_Utilisateur
    {
        get;
        set;
    }

    public virtual string ID_Admin
    {
        get { return _iD_Admin; }
        set
        {
            if (_iD_Admin != value)
            {
                if (Administrateur != null && Administrateur.ID_Admin != value)
                {
                    Administrateur = null;
                }
                _iD_Admin = value;
            }
        }
    }
    private string _iD_Admin;

    public virtual string Login_Utilisateur
    {
        get;
        set;
    }

    public virtual string Password_Utilisateur
    {
        get;
        set;
    }

    public virtual string E_Mail_Utilisateur
    {
        get;
        set;
    }

    public virtual string Nom_Utilisateur
    {
        get;
        set;
    }

    public virtual string Prenom_Utilisateur
    {
        get;
        set;
    }

    public virtual string Statu_Utilisateur
    {
        get;
        set;
    }

    public virtual string Cin_Utilisateur
    {
        get;
        set;
    }

    public virtual string Ville_Utilisateur
    {
        get;
        set;
    }

    #endregion
    #region Navigation Properties

    public virtual Administrateur Administrateur
    {
        get { return _administrateur; }
        set
        {
            if (!ReferenceEquals(_administrateur, value))
            {
                var previousValue = _administrateur;
                _administrateur = value;
                FixupAdministrateur(previousValue);
            }
        }
    }
    private Administrateur _administrateur;

    public virtual ICollection<Agence> Agences
    {
        get
        {
            if (_agences == null)
            {
                var newCollection = new FixupCollection<Agence>();
                newCollection.CollectionChanged += FixupAgences;
                _agences = newCollection;
            }
            return _agences;
        }
        set
        {
            if (!ReferenceEquals(_agences, value))
            {
                var previousValue = _agences as FixupCollection<Agence>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAgences;
                }
                _agences = value;
                var newValue = value as FixupCollection<Agence>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAgences;
                }
            }
        }
    }
    private ICollection<Agence> _agences;

    public virtual ICollection<Agent_de_credits> Agent_de_credits
    {
        get
        {
            if (_agent_de_credits == null)
            {
                var newCollection = new FixupCollection<Agent_de_credits>();
                newCollection.CollectionChanged += FixupAgent_de_credits;
                _agent_de_credits = newCollection;
            }
            return _agent_de_credits;
        }
        set
        {
            if (!ReferenceEquals(_agent_de_credits, value))
            {
                var previousValue = _agent_de_credits as FixupCollection<Agent_de_credits>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupAgent_de_credits;
                }
                _agent_de_credits = value;
                var newValue = value as FixupCollection<Agent_de_credits>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupAgent_de_credits;
                }
            }
        }
    }
    private ICollection<Agent_de_credits> _agent_de_credits;

    public virtual ICollection<Client> Clients
    {
        get
        {
            if (_clients == null)
            {
                var newCollection = new FixupCollection<Client>();
                newCollection.CollectionChanged += FixupClients;
                _clients = newCollection;
            }
            return _clients;
        }
        set
        {
            if (!ReferenceEquals(_clients, value))
            {
                var previousValue = _clients as FixupCollection<Client>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupClients;
                }
                _clients = value;
                var newValue = value as FixupCollection<Client>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupClients;
                }
            }
        }
    }
    private ICollection<Client> _clients;

    public virtual ICollection<Contact> Contacts
    {
        get
        {
            if (_contacts == null)
            {
                var newCollection = new FixupCollection<Contact>();
                newCollection.CollectionChanged += FixupContacts;
                _contacts = newCollection;
            }
            return _contacts;
        }
        set
        {
            if (!ReferenceEquals(_contacts, value))
            {
                var previousValue = _contacts as FixupCollection<Contact>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupContacts;
                }
                _contacts = value;
                var newValue = value as FixupCollection<Contact>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupContacts;
                }
            }
        }
    }
    private ICollection<Contact> _contacts;

    public virtual ICollection<Productivite> Productivites
    {
        get
        {
            if (_productivites == null)
            {
                var newCollection = new FixupCollection<Productivite>();
                newCollection.CollectionChanged += FixupProductivites;
                _productivites = newCollection;
            }
            return _productivites;
        }
        set
        {
            if (!ReferenceEquals(_productivites, value))
            {
                var previousValue = _productivites as FixupCollection<Productivite>;
                if (previousValue != null)
                {
                    previousValue.CollectionChanged -= FixupProductivites;
                }
                _productivites = value;
                var newValue = value as FixupCollection<Productivite>;
                if (newValue != null)
                {
                    newValue.CollectionChanged += FixupProductivites;
                }
            }
        }
    }
    private ICollection<Productivite> _productivites;

    #endregion
    #region Association Fixup

    private void FixupAdministrateur(Administrateur previousValue)
    {
        if (previousValue != null && previousValue.Utilisateurs.Contains(this))
        {
            previousValue.Utilisateurs.Remove(this);
        }

        if (Administrateur != null)
        {
            if (!Administrateur.Utilisateurs.Contains(this))
            {
                Administrateur.Utilisateurs.Add(this);
            }
            if (ID_Admin != Administrateur.ID_Admin)
            {
                ID_Admin = Administrateur.ID_Admin;
            }
        }
    }

    private void FixupAgences(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Agence item in e.NewItems)
            {
                item.Utilisateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Agence item in e.OldItems)
            {
                if (ReferenceEquals(item.Utilisateur, this))
                {
                    item.Utilisateur = null;
                }
            }
        }
    }

    private void FixupAgent_de_credits(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Agent_de_credits item in e.NewItems)
            {
                item.Utilisateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Agent_de_credits item in e.OldItems)
            {
                if (ReferenceEquals(item.Utilisateur, this))
                {
                    item.Utilisateur = null;
                }
            }
        }
    }

    private void FixupClients(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Client item in e.NewItems)
            {
                item.Utilisateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Client item in e.OldItems)
            {
                if (ReferenceEquals(item.Utilisateur, this))
                {
                    item.Utilisateur = null;
                }
            }
        }
    }

    private void FixupContacts(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Contact item in e.NewItems)
            {
                item.Utilisateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Contact item in e.OldItems)
            {
                if (ReferenceEquals(item.Utilisateur, this))
                {
                    item.Utilisateur = null;
                }
            }
        }
    }

    private void FixupProductivites(object sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.NewItems != null)
        {
            foreach (Productivite item in e.NewItems)
            {
                item.Utilisateur = this;
            }
        }

        if (e.OldItems != null)
        {
            foreach (Productivite item in e.OldItems)
            {
                if (ReferenceEquals(item.Utilisateur, this))
                {
                    item.Utilisateur = null;
                }
            }
        }
    }

    #endregion
}
